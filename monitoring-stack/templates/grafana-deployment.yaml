{{- if .Values.grafana.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      initContainers:
      - name: download-dashboards
        image: alpine:latest
        command:
        - sh
        - -c
        - |
          apk add --no-cache curl sed jq
          curl -sL https://grafana.com/api/dashboards/1860/revisions/latest/download -o /tmp/node-exporter.json
          curl -sL https://grafana.com/api/dashboards/15661/revisions/latest/download -o /tmp/k8s-cluster.json
          curl -sL https://grafana.com/api/dashboards/6417/revisions/latest/download -o /tmp/k8s-pods.json

          # Replace all datasource references with Prometheus using jq
          for file in node-exporter k8s-cluster k8s-pods; do
            jq 'walk(if type == "object" and has("datasource") then .datasource = "Prometheus" else . end) |
                walk(if type == "string" then gsub("\\$\\{DS_PROMETHEUS\\}|\\$\\{VAR_DATASOURCE\\}|\\$\\{datasource\\}";"Prometheus") else . end)' \
                /tmp/${file}.json > /dashboards/${file}.json
          done
        volumeMounts:
        - name: dashboards
          mountPath: /dashboards
      containers:
      - name: grafana
        image: {{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}
        imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: {{ .Values.grafana.adminUser }}
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: {{ .Values.grafana.adminPassword }}
        - name: GF_INSTALL_PLUGINS
          value: ""
        resources:
          {{- toYaml .Values.grafana.resources | nindent 10 }}
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboard-provider
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: storage
        {{- if .Values.grafana.persistence.enabled }}
        persistentVolumeClaim:
          claimName: grafana-storage
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboard-provider
        configMap:
          name: grafana-dashboard-provider
      - name: dashboards
        emptyDir: {}
{{- end }}
